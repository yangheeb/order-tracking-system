version: 1.0

# 주문 추적 시스템 (Order-Tracking-System) Cursor Rules
name: order-tracking-system

# 코드 스타일 규칙
style_rules:
  java:
    indent: 4               # 들여쓰기 4 공백 사용
    max_line_length: 120    # 최대 줄 길이 120자
    trailing_comma: true    # 마지막 요소 후 쉼표 사용
    import_ordering: true   # 임포트 알파벳 순 정렬

# 자동 완성 규칙
autocomplete:
  java:
    enabled: true
    smart_snippets: true    # 스마트 스니펫 활성화

# 프로젝트 구조 규칙
project_structure:
  # 주요 디렉토리 구조
  directories:
    - src/main/java/com/order/tracking        # 메인 소스 디렉토리
    - src/main/java/com/order/tracking/controller  # 컨트롤러
    - src/main/java/com/order/tracking/service     # 서비스
    - src/main/java/com/order/tracking/repository  # 레포지토리
    - src/main/java/com/order/tracking/entity      # 엔티티
    - src/main/java/com/order/tracking/dto         # DTO
    - src/main/java/com/order/tracking/config      # 설정
    - src/main/java/com/order/tracking/exception   # 예외
    - src/main/java/com/order/tracking/security    # 보안
    - src/main/java/com/order/tracking/util        # 유틸리티
    - src/main/resources                          # 리소스
    - src/test/java/com/order/tracking            # 테스트

# 파일 네이밍 규칙
file_naming:
  java:
    controller_suffix: Controller       # 컨트롤러 파일 접미사
    service_suffix: Service             # 서비스 파일 접미사
    repository_suffix: Repository       # 레포지토리 파일 접미사
    entity_suffix: ""                   # 엔티티 파일 접미사 없음
    dto_suffix: Dto                     # DTO 파일 접미사
    test_prefix: ""                     # 테스트 파일 접두사 없음
    test_suffix: Test                   # 테스트 파일 접미사

# 코드 생성 템플릿
code_templates:
  java:
    controller:
      template: |
        package com.order.tracking.controller;

        import org.springframework.web.bind.annotation.*;
        import org.springframework.http.ResponseEntity;
        import org.springframework.validation.annotation.Validated;
        import javax.validation.Valid;
        import lombok.RequiredArgsConstructor;

        @RestController
        @RequestMapping("/api")
        @RequiredArgsConstructor
        @Validated
        public class $NAME$Controller {
            
            private final $NAME$Service $name$Service;
            
            // TODO: API 엔드포인트 구현
        }
    
    service:
      template: |
        package com.order.tracking.service;

        import org.springframework.stereotype.Service;
        import org.springframework.transaction.annotation.Transactional;
        import lombok.RequiredArgsConstructor;

        @Service
        @RequiredArgsConstructor
        public class $NAME$Service {
            
            private final $NAME$Repository $name$Repository;
            
            // TODO: 서비스 로직 구현
        }
    
    repository:
      template: |
        package com.order.tracking.repository;

        import org.springframework.data.jpa.repository.JpaRepository;
        import org.springframework.stereotype.Repository;
        import com.order.tracking.entity.$NAME$;

        @Repository
        public interface $NAME$Repository extends JpaRepository<$NAME$, Long> {
            
            // TODO: 커스텀 쿼리 메소드 추가
        }
    
    entity:
      template: |
        package com.order.tracking.entity;

        import javax.persistence.*;
        import java.time.LocalDateTime;
        import lombok.Getter;
        import lombok.Setter;
        import lombok.NoArgsConstructor;

        @Entity
        @Table(name = "$name$s")
        @Getter
        @Setter
        @NoArgsConstructor
        public class $NAME$ {
            
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;
            
            // TODO: 필드 추가
            
            @Column(updatable = false)
            private LocalDateTime createdAt;
            
            @Column
            private LocalDateTime updatedAt;
            
            @PrePersist
            protected void onCreate() {
                createdAt = LocalDateTime.now();
                updatedAt = LocalDateTime.now();
            }
            
            @PreUpdate
            protected void onUpdate() {
                updatedAt = LocalDateTime.now();
            }
        }
    
    dto:
      template: |
        package com.order.tracking.dto;

        import javax.validation.constraints.*;
        import java.time.LocalDateTime;
        import lombok.Data;

        @Data
        public class $NAME$Dto {
            // TODO: DTO 필드 추가
        }

# CI/CD 통합 설정
ci_cd:
  build_command: "./mvnw clean package"
  test_command: "./mvnw test"
  lint_command: "./mvnw checkstyle:check"

# 로깅 및 디버깅 설정
logging:
  level: INFO
  format: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 포멧팅 규칙
formatting:
  java:
    checkstyle_enabled: true    # Checkstyle 활성화
    use_spaces: true           # 탭 대신 공백 사용
    indentation_size: 4        # 들여쓰기 크기 4
    continuation_indent: 4     # 연속 들여쓰기 크기 4

# 파일 관련 규칙
file_rules:
  encoding: UTF-8              # 파일 인코딩 UTF-8
  line_ending: LF              # 줄 끝 문자 LF (Line Feed)

# 추가 규칙
additional_rules:
  # Redis 캐시 키 규칙
  redis:
    key_prefix: "order:tracking:"
    ttl: 3600                 # 기본 TTL 1시간
    
  # RabbitMQ 설정
  rabbitmq:
    exchange_prefix: "order.tracking."
    queue_prefix: "order.tracking."
    
  # API 버전 관리
  api_versioning:
    enabled: true
    version_prefix: "v1"
    
  # 보안 규칙
  security:
    rate_limit: 100           # 초당 최대 요청 수
    cors_allowed_origins: "*"  # CORS 허용 도메인 